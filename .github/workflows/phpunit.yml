name: PHPUnit Plugin Tests

on:
  workflow_call:
    inputs:
      elgg_major_version:
        description: 'Major Elgg version number'
        default: 5
        type: number
      extra_composer_dependencies:
        description: 'Additional composer dependencies (space separate multiple packages)'
        type: string

env:
  ELGG_DB_PREFIX: c_i_elgg_
  ELGG_DB_HOST: 127.0.0.1
  ELGG_DB_NAME: elgg
  ELGG_DB_USER: root
  ELGG_DB_PASS: password
  ELGG_WWWROOT: http://localhost:8888/
  ELGG_MEMCACHE_SERVER1_HOST: 127.0.0.1
  ELGG_MEMCACHE_SERVER1_PORT: 11211
  ELGG_MEMCACHE_NAMESPACE_PREFIX: elgg_
  ELGG_REDIS_SERVER1_HOST: 127.0.0.1
  ELGG_REDIS_SERVER1_PORT: 6379
  ELGG_BRANCH: ${{ inputs.elgg_major_version == 5 && '5.1' || '6.x' }}
  ELGG_PHP_VERSION: ${{ inputs.elgg_major_version == 5 && '8.0' || '8.1' }}

jobs:
  phpunit:
    name: Run PHPUnit test suites for Elgg ${{ inputs.elgg_major_version }}
    
    runs-on: ubuntu-latest
    
    services:
      elggdb:
        image: 'mysql:8.0'
        env:
          MYSQL_DATABASE: elgg
          MYSQL_ROOT_PASSWORD: password
        ports:
          - 3306:3306

    steps:
      - name: Validate Elgg major version
        run: if [[ ! "${{ inputs.elgg_major_version }}" =~ ^(5|6)$ ]]; then echo "Invalid major Elgg version. Choose 5 or 6"; exit 1; fi

      - name: Install PHP v${{ env.ELGG_PHP_VERSION }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.ELGG_PHP_VERSION }}
          coverage: none
          extensions: gd,pdo,xml,json,mysqli,pdo_mysql,intl

      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> ${GITHUB_OUTPUT}

      - name: Restore Composer Cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Code checkout Elgg v${{ env.ELGG_BRANCH }}
        uses: actions/checkout@v4
        with:
          repository: 'Elgg/Elgg'
          ref: ${{ env.ELGG_BRANCH }}

      - name: Code checkout plugin
        uses: actions/checkout@v4
        with:
          clean: false
          path: 'mod/${{ github.event.repository.name }}'

      - name: Composer install Elgg
        run: composer install

      - name: Composer require additional dependencies
        if: inputs.extra_composer_dependencies != ''
        run: composer require ${{ inputs.extra_composer_dependencies }}

      - name: Composer install Plugin
        run: |
          cd ./mod/${{ github.event.repository.name }}
          composer install
          cd ../..

      - name: Install Site
        run: php ./elgg-cli install --config ./install/cli/testing_app.php --verbose --no-ansi --no-plugins

      - name: Activate plugin
        run: php ./elgg-cli plugins:activate --force ${{ github.event.repository.name }}
          
      - name: Run plugin unit tests
        if: hashFiles(format('mod/{0}/tests/phpunit/unit/**', github.event.repository.name)) != ''
        run: ./vendor/bin/phpunit ./mod/${{ github.event.repository.name }}/tests/phpunit/unit
          
      - name: Run plugin integration tests
        if: hashFiles(format('mod/{0}/tests/phpunit/integration/**', github.event.repository.name)) != ''
        run: ./vendor/bin/phpunit ./mod/${{ github.event.repository.name }}/tests/phpunit/integration

      - name: Run global plugin integration tests
        run: ./vendor/bin/phpunit ./engine/tests/phpunit/plugins_integration
